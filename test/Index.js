var client = require('fakeredis').createClient(null, null, {fast: true});
var Model = require('../lib/Model.js');
var RedisStore = require('../lib/RedisStore.js');
var Index = require('../lib/Index.js');
var should = require('should');
var async = require('async');

function TestModel() {}
TestModel.properties = ['foo', 'bar'];
Model(TestModel, TestModel.properties);
RedisStore(TestModel, client);
Index(TestModel, "foo", client);

/**
 * The tests here are essentially a copy of the ModelSpec cases - they verify that the cached model works more or less like the plain model.
 *
 * @todo Verify that the data is actually saved to and retrieved from the cache.
 */
describe("Indexed Model class", function(done) {
  beforeEach(function(done) {
    TestModel.purge(done);
  });

  it("has an autogenerated getter", function() {
    (typeof TestModel.getByFoo).should.be.exactly("function");
  });

  it("saves and retrieves values by index", function(done) {
    var t = new TestModel();
    t.foo = "blah";
    t.bar = "asdf";
    t.save(function(err, res) {
      if (err) return done(err);

      /* Allow the afterSave handler to finish. */
      setTimeout(function() {
        TestModel.getByFoo("blah", function(err, res) {
          res.length.should.be.exactly(1);
          res[0].foo.should.be.exactly("blah");
          done();
        });
      }, 0);
    });
  });

  it("updates index values", function(done) {
    var t = new TestModel();
    t.foo = "blah";
    t.bar = "asdf";

    var t2 = new TestModel();
    t.foo = "other 1";
    t.bar = "other 2";

    async.parallel(
      [
        function(cb) { t.save(cb); },
        function(cb) { t2.save(cb); }
      ],
      function(err, res) {
        if (err) return done(err);

        t.foo = "updated value";
        t.save(function(err, res) {
          if (err) return done(err);

          setTimeout(function() {
            TestModel.getByFoo("updated value", function(err, res) {
              if (err) return done(err);

              res.length.should.be.exactly(1);
              res[0].foo.should.be.exactly("updated value");

              TestModel.getByFoo("blah", function(err, res) {
                  if (err) return done(err);

                  res.length.should.be.exactly(0);
                  done();
              });
            });
          }, 0);
        });
      }
    );
  });
});
